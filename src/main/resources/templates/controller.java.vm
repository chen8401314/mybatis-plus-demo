package ${package.Controller};

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.*;
import lombok.RequiredArgsConstructor;

    #if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import $!{package.Service}.$!{table.serviceName};
import ${package.Entity}.${entity};
import javax.validation.Valid;
import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.NotBlank;

/**
 * <p>
 * $!{table.comment.replace("表", "")} 前端控制器
 * </p>
 *
 * @author ${author}
 */
@Validated
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequiredArgsConstructor
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@Api(value = "$!{table.comment.replace("表", "")}", tags = "$!{table.comment.replace("表", "")}接口")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end
#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    private final $!{table.serviceName} $!{table.serviceName.substring(0,1).toLowerCase()}$!{table.serviceName.substring(1)};

    @PostMapping("/page")
    @ApiOperation(value = "$!{table.comment.replace("表", "")}列表", notes = "分页查询")
    public Response<IPage<$!{entity.replace("Entity", "DTO")}>> page(@Valid @RequestBody $!{entity.replace("Entity", "PageReq")} req) {
        return Response.ok($!{table.serviceName.substring(0,1).toLowerCase()}$!{table.serviceName.substring(1)}.page(req));
    }

    @GetMapping("/get")
    @ApiOperation(value = "$!{table.comment.replace("表", "")}信息", notes = "根据ID查询")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", required = true, value =  "ID", paramType = "query"),
    })
    public Response<$!{entity.replace("Entity", "DTO")}> get(@NotBlank @RequestParam String id) {
		return Response.ok($!{entity.replace("Entity", "").toUpperCase()}_CONVERT.toDTO($!{table.serviceName.substring(0,1).toLowerCase()}$!{table.serviceName.substring(1)}.getById(id)));
	}

    @PostMapping("/create")
    @ApiOperation(value = "$!{table.comment.replace("表", "")}新增", notes = "$!{table.comment.replace("表", "")}新增")
    public Response<Void> create(@Valid @RequestBody $!{entity.replace("Entity", "Req")} $!{table.entityPath.replace("Entity", "Req")}) {
        $!{table.serviceName.substring(0,1).toLowerCase()}$!{table.serviceName.substring(1)}.create($!{table.entityPath.replace("Entity", "Req")});
        return Response.ok();
	}

    @PutMapping("/update")
    @ApiOperation(value = "$!{table.comment.replace("表", "")}修改", notes = "$!{table.comment.replace("表", "")}修改")
    public Response<Void> update(@Valid @RequestBody $!{entity.replace("Entity", "Req")} $!{table.entityPath.replace("Entity", "Req")}) {
        $!{table.serviceName.substring(0,1).toLowerCase()}$!{table.serviceName.substring(1)}.update($!{table.entityPath.replace("Entity", "Req")});
        return Response.ok();
    }

    @DeleteMapping("/batch-delete")
    @ApiOperation(value = "$!{table.comment.replace("表", "")}删除", notes = "$!{table.comment.replace("表", "")}删除")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "ids", required = true, value =  "多个用,号隔开", paramType = "query")
    })
    public Response<Void> batchDelete(@NotBlank @RequestParam String ids) {
        List<String> deleteIds = Arrays.stream(ids.split(Constant.Common.COMMA)).filter(Objects::nonNull).collect(toList());
        $!{table.serviceName.substring(0,1).toLowerCase()}$!{table.serviceName.substring(1)}.batchDelete(deleteIds);
        return Response.ok();
	}
}

#end
